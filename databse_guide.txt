

* **Frontend** ‚Üí React (UI)
* **Middleware / API layer** ‚Üí Node.js (with Next.js framework)
* **Database** ‚Üí PostgreSQL

Let‚Äôs break it down step by step so you know exactly how to set up your PostgreSQL DB and connect it to your React + Next.js app.

---

# üîπ Step 1: Install PostgreSQL

* Download and install **PostgreSQL** ([official site](https://www.postgresql.org/download/))
* Install **pgAdmin** (optional but very useful GUI for managing DB).
* Start PostgreSQL service and create a new database:

  ```sql
  CREATE DATABASE netbanking_app;
  ```

---

# üîπ Step 2: Create Tables in PostgreSQL

* Use the schema we designed earlier. Example:

  ```sql
  \c netbanking_app;  -- connect to DB

  CREATE TABLE users (
      user_id SERIAL PRIMARY KEY,
      username VARCHAR(50),
      email VARCHAR(100),
      password VARCHAR(100),
      mobile_number VARCHAR(15),
      is_active BOOLEAN,
      created_at TIMESTAMP DEFAULT NOW()
  );
  -- (repeat for other tables: accounts, loans, etc.)
  ```
* Insert initial data if needed (`INSERT` queries from earlier).

---

# üîπ Step 3: Setup Backend with Node.js + Next.js Middleware

* In your project root, initialize Node.js:

  ```bash
  npm init -y
  npm install next react react-dom express pg
  ```

  * `next` ‚Üí Next.js framework
  * `pg` ‚Üí PostgreSQL client for Node.js

* Inside your **Next.js app** (`/pages/api/` folder), create API routes (middleware layer).
  Example: `pages/api/users.js`

  ```javascript
  import { Pool } from 'pg';

  const pool = new Pool({
    user: 'postgres',
    host: 'localhost',
    database: 'netbanking_app',
    password: 'yourpassword',
    port: 5432,
  });

  export default async function handler(req, res) {
    try {
      const result = await pool.query('SELECT * FROM users');
      res.status(200).json(result.rows);
    } catch (error) {
      console.error(error);
      res.status(500).json({ error: 'Database error' });
    }
  }
  ```

---

# üîπ Step 4: Connect React Frontend to API

* Your **React frontend** (inside Next.js) will call these APIs.
* Example: fetching users in a React component:

  ```javascript
  import { useEffect, useState } from "react";

  export default function Users() {
    const [users, setUsers] = useState([]);

    useEffect(() => {
      fetch('/api/users')
        .then(res => res.json())
        .then(data => setUsers(data));
    }, []);

    return (
      <div>
        <h2>User List</h2>
        <ul>
          {users.map(u => (
            <li key={u.user_id}>{u.username} - {u.email}</li>
          ))}
        </ul>
      </div>
    );
  }
  ```

---

# üîπ Step 5: Project Structure

```
netbanking-app/
‚îÇ‚îÄ‚îÄ pages/
‚îÇ   ‚îú‚îÄ‚îÄ index.js        # Home page (React frontend)
‚îÇ   ‚îî‚îÄ‚îÄ api/            # API routes (middleware, Node.js)
‚îÇ       ‚îú‚îÄ‚îÄ users.js
‚îÇ       ‚îú‚îÄ‚îÄ accounts.js
‚îÇ       ‚îî‚îÄ‚îÄ loans.js
‚îÇ
‚îÇ‚îÄ‚îÄ components/         # Reusable React components (UI)
‚îÇ‚îÄ‚îÄ styles/             # CSS / Tailwind
‚îÇ‚îÄ‚îÄ package.json
```

---

# üîπ Step 6: Run Project

* Start PostgreSQL (`pg_ctl start`)
* Run Next.js app:

  ```bash
  npm run dev
  ```
* Visit `http://localhost:3000`

---

# üîπ Step 7: Deployment (later stage)

* **Database** ‚Üí Host PostgreSQL on **Supabase**, **Railway**, or **AWS RDS**.
* **Backend + Frontend (Next.js)** ‚Üí Deploy on **Vercel** or **Render**.
* Update connection string accordingly.

---

‚úÖ Summary:

1. Install and configure PostgreSQL (`CREATE DATABASE`, schema).
2. Create API routes in Next.js using `pg` library.
3. Connect React frontend (Next.js pages) ‚Üí API routes ‚Üí PostgreSQL.
4. Run locally and then deploy.

---

--------------------------------------------------------------
Perfect üëç let‚Äôs go step by step for **Windows setup of PostgreSQL** so you can configure it properly and then use it with your **React + Next.js + Node.js** project.

---

# üîπ Step 1: Download & Install PostgreSQL

1. Go to üëâ [PostgreSQL Windows Download](https://www.postgresql.org/download/windows/).
2. Download the **EnterpriseDB Installer** (recommended).
3. Run the installer:

   * **Installation directory**: Default (`C:\Program Files\PostgreSQL\<version>`) is fine.
   * **Password**: Set a strong password for the **postgres superuser** (e.g., `admin123`).
   * **Port**: Leave default `5432`.
   * **Components**: Keep PostgreSQL Server + pgAdmin 4.
   * Finish installation.

---

# üîπ Step 2: Verify Installation

1. Open **pgAdmin 4** (installed with PostgreSQL).

   * It will ask for your master password (use the one you set in the installer).
   * This gives you a GUI to manage databases.
2. Open **SQL Shell (psql)** (search in Start menu).

   * You‚Äôll be prompted for:

     ```
     Server [localhost]:
     Database [postgres]:
     Port [5432]:
     Username [postgres]:
     Password: (enter the one you set)
     ```
   * If you see `postgres=#`, PostgreSQL is working ‚úÖ.

---

# üîπ Step 3: Create Database & User

In `psql` or pgAdmin, run:

```sql
-- Create a new database
CREATE DATABASE netbanking_app;

-- Create a dedicated user
CREATE USER netbank_user WITH PASSWORD 'mypassword';

-- Grant privileges
GRANT ALL PRIVILEGES ON DATABASE netbanking_app TO netbank_user;
```

Now you can connect with:

```bash
psql -U netbank_user -d netbanking_app -h localhost -p 5432
```

---

# üîπ Step 4: Create Tables (Schema)

Connect to your new DB:

```sql
\c netbanking_app;
```

Example `users` table:

```sql
CREATE TABLE users (
    user_id SERIAL PRIMARY KEY,
    username VARCHAR(50),
    email VARCHAR(100),
    password VARCHAR(100),
    mobile_number VARCHAR(15),
    is_active BOOLEAN,
    created_at TIMESTAMP DEFAULT NOW()
);
```

Repeat for `accounts`, `loans`, etc. (we wrote full schema earlier).

---

# üîπ Step 5: Insert Test Data

```sql
INSERT INTO users (username, email, password, mobile_number, is_active)
VALUES 
('john_doe', 'john@example.com', 'hashed_pw1', '9876543210', TRUE),
('alice_w', 'alice@example.com', 'hashed_pw2', '9123456789', TRUE);
```

Check:

```sql
SELECT * FROM users;
```

---

# üîπ Step 6: Connect PostgreSQL to Node.js (Next.js Middleware)

In your Next.js project, install PostgreSQL client:

```bash
npm install pg
```

Create a DB connection file: `lib/db.js`

```javascript
import { Pool } from 'pg';

const pool = new Pool({
  user: 'netbank_user',
  host: 'localhost',
  database: 'netbanking_app',
  password: 'mypassword',
  port: 5432,
});

export default pool;
```

Example API route ‚Üí `pages/api/users.js`:

```javascript
import pool from '../../lib/db';

export default async function handler(req, res) {
  try {
    const result = await pool.query('SELECT * FROM users');
    res.status(200).json(result.rows);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Database error' });
  }
}
```

---

# üîπ Step 7: Run Project

1. Start PostgreSQL service (it usually auto-starts on Windows).

   * You can check in **Services (Win+R ‚Üí services.msc ‚Üí PostgreSQL)**.
2. Run Next.js app:

   ```bash
   npm run dev
   ```
3. Visit `http://localhost:3000/api/users` ‚Üí you should see JSON data from PostgreSQL ‚úÖ.

---

-------------------------------------------------------------------------------------------------------------------

You can run this file in pgAdmin or psql to create the database, tables, and insert sample data.
.sql for importing directly


---------start of file----------------------



-- Create Database
CREATE DATABASE netbanking_app;
\c netbanking_app;

-- Create User (optional)
CREATE USER netbank_user WITH PASSWORD 'mypassword';
GRANT ALL PRIVILEGES ON DATABASE netbanking_app TO netbank_user;

---------------------------------------------------
-- TABLES
---------------------------------------------------

-- Users Table
CREATE TABLE users (
    user_id SERIAL PRIMARY KEY,
    username VARCHAR(50),
    email VARCHAR(100),
    password VARCHAR(100),
    mobile_number VARCHAR(15),
    is_active BOOLEAN,
    created_at TIMESTAMP DEFAULT NOW()
);

-- Accounts Table
CREATE TABLE account (
    account_id SERIAL PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    account_no VARCHAR(20),
    account_type VARCHAR(20),
    opening_date DATE,
    status VARCHAR(20),
    curr_bal DECIMAL(15,2),
    created_at TIMESTAMP DEFAULT NOW(),
    ifsc_code VARCHAR(15),
    bankname VARCHAR(50)
);

-- Account Preferences Table
CREATE TABLE account_preferences (
    account_preference_id SERIAL PRIMARY KEY,
    account_id INT REFERENCES account(account_id),
    account_nickname VARCHAR(50),
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- Beneficiaries Table
CREATE TABLE beneficiaries (
    beneficiary_id SERIAL PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    to_account_id INT,
    to_bank_name VARCHAR(50),
    to_ifsc_code VARCHAR(15),
    created_at TIMESTAMP DEFAULT NOW()
);

-- Account Transactions Table
CREATE TABLE account_transactions (
    account_transactions_ref_id SERIAL PRIMARY KEY,
    debit_account_no VARCHAR(20),
    credit_account_no VARCHAR(20),
    upi_ref VARCHAR(50),
    time_stamp TIMESTAMP DEFAULT NOW(),
    payment_mode VARCHAR(20),
    description TEXT,
    transaction_type VARCHAR(10),
    amount DECIMAL(15,2),
    created_at TIMESTAMP DEFAULT NOW(),
    status VARCHAR(20)
);

-- User MFA Table
CREATE TABLE user_mfa (
    user_mfa_id SERIAL PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    method VARCHAR(20),
    destn VARCHAR(50),
    is_enabled BOOLEAN,
    created_at TIMESTAMP DEFAULT NOW(),
    code VARCHAR(10),
    expires_at TIMESTAMP,
    consumed BOOLEAN
);

-- Loans Table
CREATE TABLE loans (
    loan_id SERIAL PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    debt_amount DECIMAL(15,2),
    creation_date DATE,
    remaining_amount DECIMAL(15,2),
    monthly_payment DECIMAL(10,2),
    interest_rate DECIMAL(5,2),
    created_at TIMESTAMP DEFAULT NOW()
);

---------------------------------------------------
-- SAMPLE DATA
---------------------------------------------------

-- Users
INSERT INTO users (username, email, password, mobile_number, is_active) VALUES
('john_doe', 'john@example.com', 'hashed_pw1', '9876543210', TRUE),
('alice_w', 'alice@example.com', 'hashed_pw2', '9123456789', TRUE),
('bob_k', 'bob@example.com', 'hashed_pw3', '9988776655', FALSE),
('sara_m', 'sara@example.com', 'hashed_pw4', '9001122334', TRUE),
('david_p', 'david@example.com', 'hashed_pw5', '9345678901', TRUE);

-- Accounts
INSERT INTO account (user_id, account_no, account_type, opening_date, status, curr_bal, ifsc_code, bankname) VALUES
(1, 'ACC1001', 'Savings', '2022-01-15', 'Active', 50000.75, 'CBA001', 'CommBank'),
(2, 'ACC1002', 'Checking', '2021-12-01', 'Active', 20000.00, 'CBA002', 'CommBank'),
(3, 'ACC1003', 'Savings', '2023-03-10', 'Inactive', 1200.00, 'CBA003', 'CommBank'),
(4, 'ACC1004', 'Current', '2022-05-20', 'Active', 75000.00, 'CBA004', 'CommBank'),
(5, 'ACC1005', 'Savings', '2021-07-11', 'Active', 150000.50, 'CBA005', 'CommBank');

-- Account Preferences
INSERT INTO account_preferences (account_id, account_nickname) VALUES
(1, 'My Salary Account'),
(2, 'Daily Expenses'),
(3, 'Emergency Fund'),
(4, 'Business Current'),
(5, 'Investment Savings');

-- Beneficiaries
INSERT INTO beneficiaries (user_id, to_account_id, to_bank_name, to_ifsc_code) VALUES
(1, 2, 'CommBank', 'CBA002'),
(2, 3, 'CommBank', 'CBA003'),
(3, 1, 'CommBank', 'CBA001'),
(4, 5, 'CommBank', 'CBA005'),
(5, 4, 'CommBank', 'CBA004');

-- Transactions
INSERT INTO account_transactions (debit_account_no, credit_account_no, upi_ref, payment_mode, description, transaction_type, amount, status) VALUES
('ACC1001', 'ACC1002', 'UPI12345', 'UPI', 'Rent Payment', 'debit', 12000.00, 'Success'),
('ACC1002', 'ACC1003', 'UPI54321', 'NEFT', 'Bill Payment', 'debit', 500.00, 'Success'),
('ACC1003', 'ACC1001', 'UPI67890', 'UPI', 'Refund', 'credit', 200.00, 'Success'),
('ACC1004', 'ACC1005', 'UPI13579', 'IMPS', 'Loan EMI', 'debit', 7500.00, 'Pending'),
('ACC1005', 'ACC1004', 'UPI24680', 'UPI', 'Business Payment', 'credit', 50000.00, 'Success');

-- User MFA
INSERT INTO user_mfa (user_id, method, destn, is_enabled, code, expires_at, consumed) VALUES
(1, 'SMS', '9876543210', TRUE, '123456', NOW() + interval '5 minutes', FALSE),
(2, 'Email', 'alice@example.com', TRUE, '654321', NOW() + interval '10 minutes', FALSE),
(3, 'App', 'bob_k_device', FALSE, '111111', NOW() + interval '15 minutes', TRUE),
(4, 'SMS', '9001122334', TRUE, '222222', NOW() + interval '5 minutes', FALSE),
(5, 'Email', 'david@example.com', TRUE, '

-----------end of .sql file-------------

# üîπ How to Use This File

### Option 1: Run in pgAdmin

1. Open **pgAdmin 4** ‚Üí right-click on **Databases** ‚Üí Create ‚Üí Database ‚Üí Name it `netbanking_app`.
2. Open the **Query Tool**.
3. Copy‚Äìpaste the `.sql` file content above ‚Üí Run.

### Option 2: Run in `psql` (command line)

1. Save above script as `netbanking_app.sql`.
2. Run:

   ```bash
   psql -U postgres -f netbanking_app.sql
   ```

   (replace `postgres` with your username).

---

